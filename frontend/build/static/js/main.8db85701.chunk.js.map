{"version":3,"sources":["serviceWorker.js","component/ListActiveBots.jsx","component/ChatList.jsx","component/GestionList.jsx","store/features/clientSlice.js","component/BotList.jsx","component/app.jsx","component/Page404.jsx","component/Example.jsx","component/NavBar.jsx","store/store.js","index.js"],"names":["Boolean","window","location","hostname","match","ListActiveBots","_ref","botList","idCliente","react_default","a","createElement","id","map","x","users","list","key","email","first_name","last_name","profile_image","groups","length","is_active","ChatList","responses","transcription","result","_useState","useState","_useState2","Object","slicedToArray","show","setShow","onClick","style","cursor","concat","display","undefined","y","i","time","listStyle","text","GestionList","searchResult","last_updated","case_uuid","phone","extra_metadata","dni","grupo","case_duration","case_result","name","component_ChatList","case_log","login","createAsyncThunk","asyncToGenerator","regenerator_default","mark","_callee","response","wrap","_context","prev","next","axios","post","password","sent","abrupt","data","token","stop","getBotList","_ref2","_callee2","res","_context2","get","headers","authorization","_x","apply","this","arguments","getRangeDate","_ref4","_callee3","_ref3","url","startDate","endDate","requestURL","_context3","console","log","results","previous","_x2","clientSlice","createSlice","initialState","clientID","search","reducers","setClientID","state","action","payload","extraReducers","builder","addCase","fulfilled","actions","BotList","setStartDate","_useState3","_useState4","setEndDate","dispath","useDispatch","useSelector","store","client","nextData","previusData","useEffect","fetchRangeDate","Fragment","component_ListActiveBots","paddingLeft","type","onChange","e","preventDefault","target","value","max","min","component_GestionList","app","dispatch","tokenRedux","component_BotList","Page404","Example","NavBar","clientBots","position","width","height","background","fontSize","margin","textAlign","fontFamily","color","bot","lineHeight","textTransform","textDecoration","transition","configureStore","reducer","clientReducer","ReactDOM","render","es","react_router_dom","component_NavBar","react_router","index","element","component_app","path","component_Page404","component_Example","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8db85701.chunk.js","sourcesContent":["/* eslint-disable */\n\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport './CSS/list.css';\r\nconst ListActiveBots = ({ botList, idCliente }) => {\r\n    return (\r\n        <table id=\"customers\">\r\n            <tbody>\r\n                <tr>\r\n                    <th> ID </th>\r\n                    <th> Email </th>\r\n                    <th> First name </th>\r\n                    <th> Last name </th>\r\n                    <th> Profile Image </th>\r\n                    <th> # Groups </th>\r\n                    <th> Active </th>\r\n                </tr>\r\n                {\r\n                    botList.map(x => (x.id === idCliente) && x.users.map(list =>\r\n                        <tr key={list.id}>\r\n                            <td>{list.id}</td>\r\n                            <td> {list.email} </td>\r\n                            <td> {list.first_name} </td>\r\n                            <td> {list.last_name} </td>\r\n                            <td> {list.profile_image} </td>\r\n                            <td> {list.groups.length} </td>\r\n                            <td> {list.is_active ? 'true' : 'false'} </td>\r\n                        </tr>\r\n                    ))\r\n                }\r\n            </tbody>\r\n        </table>\r\n    )\r\n}\r\n\r\nexport default ListActiveBots","import React, { useState } from 'react'\r\n\r\nconst ChatList = ({ responses, transcription, result }) => {\r\n\r\n  const [ show, setShow ] = useState(false);\r\n\r\n  return (\r\n    <div>\r\n      <label onClick={() => setShow(!show)}  style={{ cursor: 'pointer' }} > {`${ show ? 'Ocultar' : 'Ver'}`} Conversacion</label>\r\n      <ul style={{ 'display': `${show ? 'block' : 'none'}` }}>\r\n        {\r\n          responses !== undefined &&\r\n          responses.map( (y, i) =>\r\n            <div key={y.time}>\r\n              <li style={{ listStyle : 'none' }} > <strong>Bot:</strong> {y.text} </li>\r\n              <li style={{ listStyle : 'none' }} > <strong>Cliente:</strong> { transcription[i] !== undefined ? transcription[i].text : result } </li>\r\n            </div>\r\n          )\r\n        }\r\n      </ul>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ChatList;","import React from 'react';\r\nimport './CSS/list.css';\r\nimport ChatList from './ChatList'\r\nconst GestionList = ( {searchResult} ) => {\r\n    return (\r\n        <table id=\"customers\">\r\n            <tbody>\r\n                <tr>\r\n                    <th> Gestionado </th>\r\n                    <th> ID Caso </th>\r\n                    <th> Telefono </th>\r\n                    <th> DNI </th>\r\n                    <th> Grupo </th>\r\n                    <th> Llamada </th>\r\n                    <th> Estado </th>\r\n                    <th> Conversacion </th>\r\n                </tr>\r\n                {\r\n                    ((searchResult !== '')) ? searchResult.map(x => {\r\n                        return (\r\n                            <tr key={x.id}>\r\n                                <td>{x.last_updated}</td>\r\n                                <td> {x.case_uuid} </td>\r\n                                <td> {x.phone} </td>\r\n                                <td> {x.extra_metadata.dni} </td>\r\n                                <td> {x.extra_metadata.grupo} </td>\r\n                                <td> {x.case_duration} </td>\r\n                                <td> {x.case_result.name} </td>\r\n                                <td>\r\n                                    <ChatList responses={x.case_log.responses} transcription={x.case_log.transcription} result={x.case_result.name} />\r\n                                </td>\r\n                            </tr>\r\n                        )\r\n                    })\r\n                        : <tr><td>Seleccione intervalo de fechas...</td></tr>\r\n                }\r\n            </tbody>\r\n        </table>\r\n    )\r\n}\r\n\r\nexport default GestionList","import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\nimport axios from 'axios';\r\n\r\n\r\nexport const login = createAsyncThunk(\r\n    'client/login',\r\n    async () => {\r\n        const response = await axios.post('https://admindev.inceptia.ai/api/v1/login/', {\r\n            \"email\": \"reactdev@iniceptia.ai\",\r\n            \"password\": \"4eSBbHqiCTPdBCTj\",\r\n        })\r\n        return response.data.token;\r\n    }\r\n)\r\n\r\nexport const getBotList = createAsyncThunk(\r\n    'client/botList',\r\n    async (token) => {\r\n        const res = await axios.get('https://admindev.inceptia.ai/api/v1/clients/', {\r\n            headers: { \"authorization\": `JWT ${token}` }\r\n        })\r\n        return res.data;\r\n    }\r\n)\r\n\r\nexport const getRangeDate = createAsyncThunk(\r\n    'client/rangeDate',\r\n    async ( { token, url, idCliente, startDate, endDate } ) => {\r\n        console.log(token, url, idCliente, startDate, endDate)\r\n        const requestURL = url === undefined ? `https://admindev.inceptia.ai/api/v1/inbound-case/?client=${idCliente !== 0 ? idCliente : '28'}&local_updated__date__gte=${startDate}&local_updated__date__lte=${endDate}`\r\n            : url\r\n        if (startDate !== null && endDate !== null) {\r\n            const res = await axios.get(requestURL, {\r\n                headers: { \"authorization\": `JWT ${token}` }\r\n            })\r\n\r\n            return {\r\n                results: res.data.results,\r\n                next: res.data.next,\r\n                previous: res.data.previous\r\n            }\r\n\r\n        }\r\n    }\r\n)\r\n\r\nexport const clientSlice = createSlice({\r\n    name: 'client',\r\n    initialState: {\r\n        clientID: 28,\r\n        token: '',\r\n        botList: [],\r\n        search: {\r\n            results: '',\r\n            next: null,\r\n            previous: null\r\n        }\r\n    },\r\n    reducers: {\r\n        setClientID: (state, action) => {\r\n            state.clientID = action.payload;\r\n        },\r\n    },\r\n    extraReducers: (builder) => {\r\n        builder.addCase(login.fulfilled, (state, action) => {\r\n            state.token = action.payload;\r\n        })\r\n        builder.addCase(getBotList.fulfilled, (state, action) => {\r\n            state.botList = action.payload;\r\n        })\r\n        builder.addCase(getRangeDate.fulfilled, (state, action) => {\r\n            state.search.results = action.payload.results;\r\n            state.search.next = action.payload.next;\r\n            state.search.previous = action.payload.previous;\r\n        })\r\n    },\r\n})\r\n\r\nexport const { setClientID } = clientSlice.actions\r\n\r\nexport default clientSlice.reducer","import React, { useEffect, useState } from 'react';\r\nimport './CSS/list.css';\r\nimport ListActiveBots from './ListActiveBots';\r\nimport GestionList from './GestionList';\r\nimport { getBotList, getRangeDate } from '../store/features/clientSlice';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nconst BotList = ({ token }) => {\r\n\r\n    const [startDate, setStartDate] = useState(null);\r\n    const [endDate, setEndDate] = useState(null);\r\n\r\n    const dispath = useDispatch();\r\n    \r\n    const botList = useSelector( store => store.client.botList );\r\n    const searchResult = useSelector( store => store.client.search.results );\r\n    const nextData = useSelector( store => store.client.search.next );\r\n    const previusData = useSelector( store => store.client.search.previous );\r\n    const idCliente = useSelector( store => store.client.clientID );\r\n\r\n    const onChangeStart = (e) => {\r\n        e.preventDefault();\r\n        setStartDate(e.target.value);\r\n    }\r\n    const onChangeEnd = (e) => {\r\n        e.preventDefault();\r\n        setEndDate(e.target.value);\r\n    }\r\n\r\n    useEffect(() => {\r\n\r\n        dispath( getBotList(token) );\r\n\r\n    }, [token])\r\n\r\n    const fetchRangeDate = async (url) => {\r\n\r\n        dispath( getRangeDate( {token, url, idCliente, startDate, endDate} ) );\r\n\r\n    }\r\n    return (\r\n        botList !== '' &&\r\n        <>\r\n            <h1 id=\"customers\" > <strong>Lista de bots</strong> </h1>\r\n\r\n            <ListActiveBots botList={botList} idCliente={idCliente} />\r\n\r\n            <br />\r\n\r\n            <h2 id=\"customers\" >Lista de casos gestionados</h2>\r\n\r\n            <div style={{ paddingLeft: '70vw' }} >\r\n                Desde: &nbsp; <input type=\"date\" name=\"start\" onChange={onChangeStart} max={endDate} /> &nbsp;\r\n                Hasta: &nbsp; <input type=\"date\" name=\"end\" onChange={onChangeEnd} min={startDate}/>\r\n                <button onClick={() => fetchRangeDate()} >Buscar</button>\r\n            </div>\r\n\r\n            <br />\r\n\r\n            <GestionList searchResult = { searchResult } />\r\n\r\n            <div id=\"customers\" >\r\n                {previusData !== null && <button onClick={() => fetchRangeDate(previusData)} >Anterior</button>}\r\n                {nextData !== null && <button onClick={() => fetchRangeDate(nextData)} >Siguiente</button>}\r\n            </div>\r\n        </>\r\n\r\n    )\r\n}\r\n\r\nexport default BotList","import React, { useEffect } from 'react'\r\nimport BotList from './BotList';\r\nimport { login } from '../store/features/clientSlice';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nconst app = () => {\r\n\r\n    const dispatch = useDispatch();\r\n    const tokenRedux = useSelector( store => store.client.token );\r\n\r\n    useEffect(() => {\r\n\r\n        dispatch( login() );\r\n\r\n    }, [])\r\n\r\n    return (\r\n        <>\r\n            {\r\n                tokenRedux !== '' \r\n                    ? <BotList token={tokenRedux}/>\r\n                    : <h1>Loading..</h1>\r\n            }\r\n        </>\r\n\r\n    )\r\n}\r\n\r\nexport default app","import React from 'react'\r\n\r\nconst Page404 = () => {\r\n  return (\r\n    <h1>404 pagina no reconocida</h1>\r\n  )\r\n}\r\n\r\nexport default Page404","import React from 'react'\r\n\r\nconst Example = () => {\r\n  return (\r\n    <h1>Example</h1>\r\n  )\r\n}\r\n\r\nexport default Example","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { setClientID } from '../store/features/clientSlice';\r\n\r\nconst NavBar = () => {\r\n\r\n    const dispatch = useDispatch()\r\n    const botList = useSelector(store => store.client.botList);\r\n    const clientBots = botList.length > 0 ? botList.map(x => { return { \"name\": x.name, \"id\": x.id } }) : '';\r\n\r\n    return (\r\n        <aside style={{ \"position\": \"fixed\", \"width\": \"10%\", \"height\": \"100vh\", \"background\": \"#EED1FF\", \"fontSize\": \"1vh\" }}>\r\n            <nav style={{ \"position\": \"relative\", \"margin\": \"0 10%\", \"textAlign\": \"right\", \"fontFamily\": \"Arial, Helvetica, sans-serif\" }} >\r\n                <h2 style={{ color: 'grey' }}  >Cliente</h2>\r\n                <ul style={{ 'listStyle': 'none' }} >\r\n                    {\r\n                        clientBots !== '' && clientBots.map((bot, i) =>\r\n                            <li key={i} >\r\n                                <div style={{ \"lineHeight\": \"5em\", \"textTransform\": \"uppercase\", \"textDecoration\": \"none\", \"display\": \"block\", \"transition\": \"all ease-out 300ms\", 'color': 'black', 'cursor': 'pointer' }} onClick={() => dispatch(setClientID(bot.id))} >\r\n                                    {bot.name}\r\n                                </div>\r\n                            </li>)\r\n                    }\r\n                </ul>\r\n            </nav>\r\n        </aside>\r\n    )\r\n}\r\n\r\nexport default NavBar","import { configureStore } from '@reduxjs/toolkit';\r\nimport clientReducer from './features/clientSlice';\r\n\r\nexport default configureStore({\r\n    reducer: {\r\n        client: clientReducer\r\n    },\r\n});","import \"babel-polyfill\";\nimport \"react-app-polyfill/ie11\";\nimport React from 'react';\nimport ReactDOM from \"react-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport {\n  BrowserRouter,\n  Routes,\n  Route,\n} from \"react-router-dom\";\nimport App from './component/app.jsx';\nimport Page404 from './component/Page404';\nimport Example from './component/Example';\nimport NavBar from './component/NavBar';\nimport { Provider } from 'react-redux';\nimport store from './store/store';\n\nReactDOM.render(\n  <Provider store={store} >\n    <BrowserRouter>\n      <NavBar/>\n      <Routes>\n        <Route index element={<App />} />\n        <Route path=\"*\" element={<Page404 />} />\n        <Route path='example' element={ <Example/> } />\n      </Routes>\n    </BrowserRouter>\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}