{"version":3,"sources":["serviceWorker.js","component/NavBar.jsx","component/ChatList.jsx","component/BotList.jsx","component/app.jsx","index.js"],"names":["Boolean","window","location","hostname","match","NavBar","_ref","clientBots","react_default","a","createElement","className","style","position","width","height","background","fontSize","margin","textAlign","fontFamily","color","listStyle","map","bot","i","key","lineHeight","textTransform","textDecoration","display","transition","href","concat","id","name","ChatList","responses","transcription","result","_useState","useState","_useState2","Object","slicedToArray","show","setShow","onClick","cursor","undefined","y","time","text","BotList","token","idCliente","dataList","setDataList","_useState3","Date","_useState4","startDate","setStartDate","_useState5","_useState6","endDate","setEndDate","_useState7","_useState8","searchResult","setSearchResult","_useState9","_useState10","nextData","setNextData","_useState11","_useState12","previusData","setPreviusData","useEffect","_ref2","asyncToGenerator","regenerator_default","mark","_callee","res","wrap","_context","prev","next","axios","get","headers","authorization","sent","data","stop","apply","this","arguments","fetchData","catch","console","error","fetchRangeDate","_ref3","_callee2","url","requestURL","_context2","getFullYear","getUTCMonth","getUTCDate","status","results","previous","_x","Fragment","component_NavBar","x","users","list","email","first_name","last_name","profile_image","groups","length","is_active","paddingLeft","react_datepicker_min_default","selected","onChange","dates","_dates","start","end","selectsRange","last_updated","case_uuid","phone","extra_metadata","dni","grupo","case_duration","case_result","component_ChatList","case_log","app","setToken","post","password","then","response","log","search","Number","replace","component_BotList","ReactDOM","render","component_app","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.55d42647.chunk.js","sourcesContent":["/* eslint-disable */\n\n// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\r\n\r\nconst NavBar = ( { clientBots } ) => {\r\n    return (\r\n        <aside className=\"sidebar\" style={ {\"position\":\"fixed\",\"width\":\"10%\",\"height\":\"100vh\",\"background\":\"#EED1FF\",\"fontSize\":\"1vh\"} }>\r\n            <nav className=\"nav\" style={ {\"position\":\"relative\",\"margin\":\"0 10%\",\"textAlign\":\"right\", \"fontFamily\": \"Arial, Helvetica, sans-serif\"} } >\r\n                <h2 style={ {color: 'grey'} }  >Cliente</h2>\r\n                <ul style={{ 'listStyle': 'none' }} >\r\n                    {\r\n                        clientBots.map( (bot, i )=> <li key = { i } ><a style={ {\"lineHeight\":\"5em\",\"textTransform\":\"uppercase\",\"textDecoration\":\"none\",\"display\":\"block\",\"transition\":\"all ease-out 300ms\", 'color': 'black'} }  href={`?${bot.id}`} > {bot.name} </a></li> )\r\n                    }\r\n                </ul>\r\n            </nav>\r\n        </aside>\r\n    )\r\n}\r\n\r\nexport default NavBar","import React, { useState } from 'react'\r\n\r\nconst ChatList = ({ responses, transcription, result }) => {\r\n\r\n  const [ show, setShow ] = useState(false);\r\n\r\n  return (\r\n    <div>\r\n      <label onClick={() => setShow(!show)}  style={{ cursor: 'pointer' }} > {`${ show ? 'Ocultar' : 'Ver'}`} Conversacion</label>\r\n      <ul style={{ 'display': `${show ? 'block' : 'none'}` }}>\r\n        {\r\n          responses !== undefined &&\r\n          responses.map( (y, i) =>\r\n            <div key={y.time}>\r\n              <li style={{ listStyle : 'none' }} > <strong>Bot:</strong> {y.text} </li>\r\n              <li style={{ listStyle : 'none' }} > <strong>Cliente:</strong> { transcription[i] !== undefined ? transcription[i].text : result } </li>\r\n            </div>\r\n          )\r\n        }\r\n      </ul>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default ChatList;","import React, { useEffect, useState } from 'react';\r\nimport './CSS/list.css';\r\nimport axios from 'axios';\r\nimport NavBar from './NavBar';\r\nimport DatePicker from \"react-datepicker\";\r\nimport \"react-datepicker/dist/react-datepicker.css\";\r\nimport ChatList from './ChatList'\r\nconst BotList = ({ token, idCliente }) => {\r\n\r\n    const [dataList, setDataList] = useState('');\r\n    const [startDate, setStartDate] = useState(new Date());\r\n    const [endDate, setEndDate] = useState(new Date());\r\n    const [searchResult, setSearchResult] = useState('');\r\n    const [nextData, setNextData] = useState(null);\r\n    const [previusData, setPreviusData] = useState(null);\r\n\r\n    const onChange = (dates) => {\r\n        const [start, end] = dates;\r\n        setStartDate(start);\r\n        setEndDate(end);\r\n    };\r\n\r\n    useEffect(() => {\r\n\r\n        const fetchData = async () => {\r\n            const res = await axios.get('https://admindev.inceptia.ai/api/v1/clients/', {\r\n                headers: { \"authorization\": `JWT ${token}` }\r\n            })\r\n            setDataList(res.data);\r\n            // console.log(res.data)\r\n        }\r\n        fetchData()\r\n            .catch(console.error);;\r\n\r\n    }, [token])\r\n\r\n    // const dataList = [\r\n    //     {\r\n    //         \"id\": 28,\r\n    //         \"name\": \"gmotors\",\r\n    //         \"users\":\r\n    //             [\r\n    //                 {\r\n    //                     \"id\": 4,\r\n    //                     \"email\": \"gmotors@inceptia.ai\",\r\n    //                     \"first_name\": \"GMotors\",\r\n    //                     \"last_name\": \"\",\r\n    //                     \"profile_image\": null,\r\n    //                     \"groups\":\r\n    //                         [\r\n    //                             {\r\n    //                                 \"id\": 4,\r\n    //                                 \"name\": \"CAMPAIGN CREATOR\"\r\n    //                             }\r\n    //                         ],\r\n    //                     \"is_active\": true\r\n    //                 },\r\n    //                 {\r\n    //                     \"id\": 41,\r\n    //                     \"email\": \"reactdev@iniceptia.ai\",\r\n    //                     \"first_name\": \"React\",\r\n    //                     \"last_name\": \"Dev\",\r\n    //                     \"profile_image\": null,\r\n    //                     \"groups\":\r\n    //                         [\r\n    //                             {\r\n    //                                 \"id\": 2,\r\n    //                                 \"name\": \"MANAGER\"\r\n    //                             },\r\n    //                             {\r\n    //                                 \"id\": 3,\r\n    //                                 \"name\": \"REPORT\"\r\n    //                             }\r\n    //                         ],\r\n    //                     \"is_active\": true\r\n    //                 },\r\n    //                 {\r\n    //                     \"id\": 6,\r\n    //                     \"email\": \"fernando.spena@teleperformance.com\",\r\n    //                     \"first_name\": \"Fernando\",\r\n    //                     \"last_name\": \"Spena\",\r\n    //                     \"profile_image\": null,\r\n    //                     \"groups\":\r\n    //                         [\r\n    //                             {\r\n    //                                 \"id\": 3,\r\n    //                                 \"name\": \"REPORT\"\r\n    //                             }\r\n    //                         ],\r\n    //                     \"is_active\": true\r\n    //                 }\r\n    //             ]\r\n    //     },\r\n    //     {\r\n    //         \"id\": 8,\r\n    //         \"name\": \"motors\",\r\n    //         \"users\":\r\n    //             [\r\n    //                 {\r\n    //                     \"id\": 4,\r\n    //                     \"email\": \"gmotors@inceptia.ai\",\r\n    //                     \"first_name\": \"GMotors\",\r\n    //                     \"last_name\": \"\",\r\n    //                     \"profile_image\": null,\r\n    //                     \"groups\":\r\n    //                         [\r\n    //                             {\r\n    //                                 \"id\": 4,\r\n    //                                 \"name\": \"CAMPAIGN CREATOR\"\r\n    //                             }\r\n    //                         ],\r\n    //                     \"is_active\": true\r\n    //                 },\r\n    //                 {\r\n    //                     \"id\": 41,\r\n    //                     \"email\": \"reactdev@iniceptia.ai\",\r\n    //                     \"first_name\": \"React\",\r\n    //                     \"last_name\": \"Dev\",\r\n    //                     \"profile_image\": null,\r\n    //                     \"groups\":\r\n    //                         [\r\n    //                             {\r\n    //                                 \"id\": 2,\r\n    //                                 \"name\": \"MANAGER\"\r\n    //                             },\r\n    //                             {\r\n    //                                 \"id\": 3,\r\n    //                                 \"name\": \"REPORT\"\r\n    //                             }\r\n    //                         ],\r\n    //                     \"is_active\": true\r\n    //                 },\r\n    //                 {\r\n    //                     \"id\": 6,\r\n    //                     \"email\": \"fernando.spena@teleperformance.com\",\r\n    //                     \"first_name\": \"Fernando\",\r\n    //                     \"last_name\": \"Spena\",\r\n    //                     \"profile_image\": null,\r\n    //                     \"groups\":\r\n    //                         [\r\n    //                             {\r\n    //                                 \"id\": 3,\r\n    //                                 \"name\": \"REPORT\"\r\n    //                             }\r\n    //                         ],\r\n    //                     \"is_active\": true\r\n    //                 }\r\n    //             ]\r\n    //     },        \r\n    // ]\r\n\r\n    // const dataDos = {\r\n    //     \"count\": 25,\r\n    //     \"next\":\r\n    //         \"http://admindev.inceptia.ai/api/v1/inbound-case/?client=28&local_updated__date__gte=2021 - 03 - 01 & local_updated__date__lte=2022-03 - 25 & page=2\",\r\n    //     \"previous\": null,\r\n    //     \"results\":\r\n    //         [\r\n    //             {\r\n    //                 \"id\": 23963,\r\n    //                 \"client\":\r\n    //                 {\r\n    //                     \"id\": 28,\r\n    //                     \"name\": \"gmotors\"\r\n    //                 },\r\n    //                 \"case_uuid\": \"6\",\r\n    //                 \"phone\": 541140754716,\r\n    //                 \"first_name\": \"\",\r\n    //                 \"last_name\": \"\",\r\n    //                 \"code\": null,\r\n    //                 \"case_result\":\r\n    //                 {\r\n    //                     \"result_id\": 3,\r\n    //                     \"name\": \"Cortó Cliente - Orden Identificada\",\r\n    //                     \"is_final\": true,\r\n    //                     \"contacted\": true\r\n    //                 },\r\n    //                 \"case_duration\": \"00:01:07\",\r\n    //                 \"case_log\":\r\n    //                 {\r\n    //                     \"responses\":\r\n    //                         [\r\n    //                             {\r\n    //                                 \"text\": \"Buenas tardes. Este es el asistente para envíos de cupones de Pago de Plan de Ahorro Chevrolet.Por favor marque o diga en forma clara los cuatro números de su Grupo uno por uno\",\r\n    //                                 \"time\": 1635957629,\r\n    //                                 \"confidence\": 1\r\n    //                             },\r\n    //                             {\r\n    //                                 \"text\": \"No logré identificar su número de grupo. Por favor marque o dígalo nuevamente dígito por dígito\",\r\n    //                                 \"time\": 1635957648,\r\n    //                                 \"confidence\": 1\r\n    //                             },\r\n    //                             {\r\n    //                                 \"text\": \"Gracias, ahora marque o diga los 3 números del Orden\",\r\n    //                                 \"time\": 1635957662,\r\n    //                                 \"confidence\": 1\r\n    //                             },\r\n    //                             {\r\n    //                                 \"text\": \"Por último, también marque o diga los números de su documento uno por uno\",\r\n    //                                 \"time\": 1635957673,\r\n    //                                 \"confidence\": 1\r\n    //                             },\r\n    //                             {\r\n    //                                 \"text\": \"Disculpe, aguarde un momento por favor\",\r\n    //                                 \"time\": 1635957689,\r\n    //                                 \"confidence\": 1\r\n    //                             },\r\n    //                             {\r\n    //                                 \"text\": \"Disculpe, aguarde un momento por favor\",\r\n    //                                 \"time\": 1635957695,\r\n    //                                 \"confidence\": 1\r\n    //                             }\r\n    //                         ],\r\n    //                     \"result_id\": 3,\r\n    //                     \"commitment\": \"\",\r\n    //                     \"got_promise\": false,\r\n    //                     \"transcription\":\r\n    //                         7\r\n    //                         [\r\n    //                         {\r\n    //                             \"text\": \"4 \",\r\n    //                             \"time\": 1635957647,\r\n    //                             \"confidence\": 0.98\r\n    //                         },\r\n    //                         {\r\n    //                             \"text\": \"4875 \",\r\n    //                             \"time\": 1635957661,\r\n    //                             \"confidence\": 1.0\r\n    //                         },\r\n    //                         {\r\n    //                             \"text\": \"726 \",\r\n    //                             \"time\": 1635957672,\r\n    //                             \"confidence\": 1.0\r\n    //                         },\r\n    //                         {\r\n    //                             \"text\": \"33487562 \",\r\n    //                             \"time\": 1635957688,\r\n    //                             \"confidence\": 1.0\r\n    //                         }\r\n    //                         ],\r\n    //                     \"final_sip_code\": 200\r\n    //                 },\r\n    //                 \"extra_metadata\":\r\n    //                 {\r\n    //                     \"dni\": \"33487562\",\r\n    //                     \"grupo\": \"4875\",\r\n    //                     \"orden\": \"726\"\r\n    //                 },\r\n    //                 \"recording\":\r\n    //                     \"https://admindev.inceptia.ai/media/inbound_recordings/inbound_recording_23963-20211103_1641_8k_9qeN6IS.wav\",\r\n    //                 \"is_complete\": true,\r\n    //                 \"status\": \"CLOSED\",\r\n    //                 \"last_updated\": \"03/11/2021 13:41:40\",\r\n    //                 \"is_active\": true\r\n    //             },\r\n    //         ]\r\n    // }\r\n\r\n    const fetchRangeDate = async (url) => {\r\n        const requestURL = url === undefined ? `https://admindev.inceptia.ai/api/v1/inbound-case/?client=${ idCliente !== 0 ? idCliente : '28' }&local_updated__date__gte=${startDate.getFullYear()}-${startDate.getUTCMonth() + 1}-${startDate.getUTCDate()}&local_updated__date__lte=${endDate.getFullYear()}-${endDate.getUTCMonth() + 1}-${endDate.getUTCDate()}`\r\n            : url\r\n        if ( startDate !== null && endDate !== null ) {\r\n            const res = await axios.get(requestURL, {\r\n                headers: { \"authorization\": `JWT ${token}` }\r\n            })\r\n            res.status === 200 && setSearchResult(res.data.results);\r\n            res.status === 200 && setNextData(res.data.next);\r\n            res.status === 200 && setPreviusData(res.data.previous);\r\n        }\r\n    }\r\n    return (\r\n        dataList !== '' &&\r\n        <>\r\n            <NavBar clientBots={dataList.map(x => { return { \"name\": x.name, \"id\": x.id } })} />\r\n            <table id=\"customers\">\r\n                <span> <strong>Lista de bots</strong> </span>\r\n                <tbody>\r\n                    <tr>\r\n                        <th> ID </th>\r\n                        <th> Email </th>\r\n                        <th> First name </th>\r\n                        <th> Last name </th>\r\n                        <th> Profile Image </th>\r\n                        <th> # Groups </th>\r\n                        <th> Active </th>\r\n                    </tr>\r\n                    {\r\n                        dataList.map(x => (x.id !== idCliente) && x.users.map(list =>\r\n                            <tr key={list.id}>\r\n                                <td>{list.id}</td>\r\n                                <td> {list.email} </td>\r\n                                <td> {list.first_name} </td>\r\n                                <td> {list.last_name} </td>\r\n                                <td> {list.profile_image} </td>\r\n                                <td> {list.groups.length} </td>\r\n                                <td> {list.is_active ? 'true' : 'false'} </td>\r\n                            </tr>\r\n                        ))\r\n                    }\r\n                </tbody>\r\n            </table>\r\n            <br />\r\n            <h2 id=\"customers\" >Lista de casos gestionados</h2>\r\n            <div style={{ paddingLeft: '70vw' }} >\r\n                <DatePicker\r\n                    selected={startDate}\r\n                    onChange={onChange}\r\n                    startDate={startDate}\r\n                    endDate={endDate}\r\n                    selectsRange\r\n\r\n                />\r\n                <button onClick={() => fetchRangeDate()} >Buscar</button>\r\n            </div>\r\n            <br />\r\n            <table id=\"customers\">\r\n                <tbody>\r\n                    <tr>\r\n                        <th> Gestionado </th>\r\n                        <th> ID Caso </th>\r\n                        <th> Telefono </th>\r\n                        <th> DNI </th>\r\n                        <th> Grupo </th>\r\n                        <th> Llamada </th>\r\n                        <th> Estado </th>\r\n                        <th> Conversacion </th>\r\n                    </tr>\r\n                    {\r\n                        ((searchResult !== '')) ? searchResult.map(x => {\r\n                            return (\r\n                                <tr key={x.id}>\r\n                                    <td>{x.last_updated}</td>\r\n                                    <td> {x.case_uuid} </td>\r\n                                    <td> {x.phone} </td>\r\n                                    <td> {x.extra_metadata.dni} </td>\r\n                                    <td> {x.extra_metadata.grupo} </td>\r\n                                    <td> {x.case_duration} </td>\r\n                                    <td> {x.case_result.name} </td>\r\n                                    <td>\r\n                                        <ChatList responses={ x.case_log.responses } transcription={ x.case_log.transcription } result={x.case_result.name} />\r\n                                    </td>\r\n                                </tr>\r\n                            )\r\n                        })\r\n                            : <span>Seleccione intervalo de fechas...</span>\r\n                    }\r\n\r\n                    {previusData !== null && <button onClick={() => fetchRangeDate(previusData)} >Anterior</button>}\r\n                    {nextData !== null && <button onClick={() => fetchRangeDate(nextData)} >Siguiente</button>}\r\n                </tbody>\r\n            </table>\r\n        </>\r\n\r\n    )\r\n}\r\n\r\nexport default BotList","import React, { useEffect, useState } from 'react'\r\nimport axios from 'axios';\r\nimport BotList from './BotList';\r\n\r\nconst app = () => {\r\n    const [token, setToken] = useState('asd');\r\n    useEffect(() => {\r\n\r\n        axios.post('https://admindev.inceptia.ai/api/v1/login/', {\r\n            \"email\": \"reactdev@iniceptia.ai\",\r\n            \"password\": \"4eSBbHqiCTPdBCTj\",\r\n        })\r\n            .then(function (response) {\r\n                response.status === 200 && setToken(response.data.token);\r\n            })\r\n            .catch(function (error) {\r\n                console.log(error);\r\n            });\r\n\r\n    }, [])\r\n\r\n    const search = window.location.search;\r\n    const idCliente = Number( search.replace('?',' ') ) !== 0 \r\n                        ? Number( search.replace('?',' ') ) \r\n                        : 28;\r\n\r\n    return (\r\n        <>\r\n            {\r\n                token !== '' \r\n                    ? <BotList token={token} idCliente={ idCliente }/>\r\n                    : <h1>Loading..</h1>\r\n            }\r\n        </>\r\n\r\n    )\r\n}\r\n\r\nexport default app","import \"babel-polyfill\";\nimport \"react-app-polyfill/ie11\";\nimport React from 'react';\nimport ReactDOM from \"react-dom\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport App from './component/app.jsx';\n\nReactDOM.render(\n  <App/>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}